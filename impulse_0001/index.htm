
<html>
  <head>
    <title>WebGL - Hello World!</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <script src="impulse.js" type="text/javascript"></script>

   <!-- Fragment shader program -->

    <script id="shader-fs" type="x-shader/x-fragment">
      // -----------------------------------------------------------------------
      // BEGIN - Common prelude
      // -----------------------------------------------------------------------
      precision mediump float;

      uniform vec2 iResolution;
      uniform float iTime;

      varying highp vec2 vTextureCoord;
      uniform sampler2D uSampler;

      void mainImage(out vec4 fragColor, in vec2 fragCoord);

      void main(void) {
        mainImage(gl_FragColor, vTextureCoord*iResolution);
      }
      // -----------------------------------------------------------------------
      // END - Common prelude
      // -----------------------------------------------------------------------

      #define TOLERANCE       0.000001
      #define MAX_RAY_LENGTH  16.0
      #define MAX_BOUNCES     8
      #define MAX_RAY_MARCHES 80

      #define PI              3.141592654
      #define TAU             (2.0*PI)

      #define DEG2RAD         (PI/180.0)

      #define PERIOD          14.0
      #define FADETIME        2.0

      #define AA              0


      void pR(inout vec2 p, float a)
      {
        p = cos(a)*p + sin(a)*vec2(p.y, -p.x);
      }

      float getTimeInPeriod()
      {
      //  return mod(iTime/10.0, PERIOD) + 3.0;
        return mod(iTime, PERIOD);
      }

      float getPeriod()
      {
        return floor(iTime / PERIOD);
      }

      float maxComp(in vec3 p)
      {
        return max(p.x,max(p.y,p.z));
      }

      float lengthN(in vec3 v, in float n)
      {
        v = abs(v);
        v = pow(v, vec3(n));
        return pow(v.x + v.y + v.z, 1.0/n);
      }

      float sdRoundCube(in vec3 p, float r)
      {
        return lengthN(p, 8.0) - r;
      }

      float sgn(float x)
      {
        return (x<0.0)?-1.0:1.0;
      }

      void pR90(inout vec2 p)
      {
        p = vec2(p.y, -p.x);
      }

      void pR270(inout vec2 p)
      {
        p = vec2(-p.y, p.x);
      }

      float sdCapsule(vec3 p, in vec2 h)
      {
        pR90(p.xy);
        float r = h.x;
        float c = h.y/2.0;
        return mix(length(p.xz) - r, length(vec3(p.x, abs(p.y) - c, p.z)) - r, step(c, abs(p.y)));
      }

      float capsule(in vec3 p, in vec2 f, in vec2 t, float r)
      {
        vec2 diff = t - f;
        float a = atan(diff.y, diff.x);
        p.xy -= f + diff*0.5;
        pR(p.xy, a);

        return sdCapsule(p, vec2(r, length(diff)));
      }


      float pMod1(inout float p, float size)
      {
        float halfsize = size*0.5;
        float c = floor((p + halfsize)/size);
        p = mod(p + halfsize, size) - halfsize;
        return c;
      }

      vec3 pMod3(inout vec3 p, vec3 size)
      {
        vec3 c = floor((p + size*0.5)/size);
        p = mod(p + size*0.5, size) - size*0.5;
        return c;
      }

      float sdBox(vec3 p, vec3 b)
      {
        vec3  di = abs(p) - b;
        float mc = maxComp(di);
        return min(mc,length(max(di,0.0)));
      }

      float sdSphere(vec3 p, float r)
      {
        return length(p) - r;
      }

      float impulse1(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)
      {
        col    = vec3(0.3);
        ref    = 0.2;
        trans  = 0.9;
        absorb = 0.5*vec3(1.0, 2.0, 3.0);
        float s  = sdSphere(p, 0.6);
        float is = sdSphere(p, 0.8);
        float rc = sdRoundCube(p, 1.0);

        float d = rc;
        d = max(d, -is);
        d = min(d, s);
        if (d == s)
        {
          absorb = 1.0*vec3(1.0, -1.0, -2.0);
        }
        return d;
      }

      float sdTorus(vec3 p, vec2 t)
      {
        vec2 q = vec2(length(p.xz)-t.x,p.y);
        return length(q)-t.y;
      }

      float truchetArc(vec3 pos, float r)
      {
        return sdTorus(pos - vec3(0.0, 0.5, 0.0), vec2(0.5, r));
      }

      float sdCross(in vec3 p, in float r)
      {
        float xz = length(p.xz) - r;
        float xy = length(p.xy) - r;
        float yz = length(p.yz) - r;

        return min(min(xz, xy), yz);
      }

      float rand(vec3 r) { return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453); }

      float truchetCell1(vec3 pos, float r1, float r2)
      {
        float t =
          min(min(
            truchetArc(pos, r1),
            truchetArc(vec3(pos.z - 1.0,1.0-pos.x,pos.y - 1.0), r1)),
            truchetArc(vec3(pos.y,1.0-pos.z,pos.x - 1.0), r1));
        return t;
      }

      float truchetCell2(vec3 pos, float r1, float r2)
      {
        float c  = sdCross(pos - vec3(0.5), r1);
        float s  = sdSphere(pos - vec3(0.5), r2);
        return min(c, s);
      }


      float truchet(vec3 pos, float r1, float r2)
      {
        vec3 cellpos=fract(pos);
        vec3 gridpos=floor(pos);

        float rnd=rand(gridpos + vec3(10.0));
        int s = int(rnd*8.0);

        /*
        if (s == 0) ;
        else if (s == 1) cellpos = vec3(cellpos.x,1.0-cellpos.y,cellpos.z)

        switch(s)
        {
        case 0:
          break;
        case 1:
          cellpos = vec3(cellpos.x,1.0-cellpos.y,cellpos.z);
          break;
        case 2:
          cellpos = vec3(1.0-cellpos.x,cellpos.y,cellpos.z);
          break;
        case 3:
          cellpos = vec3(1.0-cellpos.x,1.0-cellpos.y,cellpos.z);
          break;
        case 4:
          cellpos = vec3(cellpos.y,cellpos.x,1.0-cellpos.z);
          break;
        case 5:
          cellpos = vec3(cellpos.y,1.0-cellpos.x,1.0-cellpos.z);
          break;
        case 6:
          cellpos = vec3(1.0-cellpos.y,cellpos.x,1.0-cellpos.z);
          break;
        case 7:
        default:
          cellpos = vec3(1.0-cellpos.y,1.0-cellpos.x,1.0-cellpos.z);
          break;
        }
      */

        if(rnd < 0.8)
        {
          return truchetCell1(cellpos, r1, r2);
        }
        else
        {
          return truchetCell2(cellpos, r1, r2);
        }
      }

      float impulse6(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)
      {
        col    = vec3(1.0);
        ref    = 0.2;
        trans  = 0.9;
        absorb = 0.5*vec3(1.0, 2.0, 3.0);

        float s  = 0.9;
        float b1 = sdBox(p, vec3(1.0));
        float b2 = sdBox(p, vec3(0.9));
        float b3 = sdBox(p, vec3(0.88));
        float t  = max(b2, truchet(p/s, 0.1, 0.35)*s);
        float it = max(b3, truchet(p/s, 0.075, 0.30)*s);
        float tb = max(t , -it);
        float d = max(b1, -tb);
        if (d == it)
        {
          absorb = 2.5*vec3(1.0, -1.0, -2.0);
        }
        return d;
      }

      float distanceField(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)
      {
        float i = impulse1(p, col, ref, trans, absorb);

        float rc = sdRoundCube(p - vec3(0.0, -5.05, 0.0), 4.0);

        float d = min(rc, i);
        if (d == rc)
        {
          col    = vec3(1.0);
          ref    = 0.2;
          trans  = 0.0;
        }
        return d;
      }

      vec3 saturate(in vec3 a)   { return clamp(a, 0.0, 1.0); }
      vec2 saturate(in vec2 a)   { return clamp(a, 0.0, 1.0); }
      float saturate(in float a) { return clamp(a, 0.0, 1.0); }

      const vec3 lightPos1 = 100.0*vec3(-0.3, 0.0, 1.0);
      const vec3 lightPos2 = 100.0*vec3(-0.5, -0.1, -1.2);

      const vec3 lightCol1 = vec3(8.0/8.0,7.0/8.0,6.0/8.0);
      const vec3 lightCol2 = vec3(8.0/8.0,6.0/8.0,7.0/8.0);

      vec3 getSkyColor(vec3 rayDir)
      {
        vec3 lightDir1 = normalize(lightPos1);
        vec3 lightDir2 = normalize(lightPos2);

        float ld1      = max(dot(lightDir1, rayDir), 0.0);
        float ld2      = max(dot(lightDir2, rayDir), 0.0);
        vec3 final     = vec3(0.125);

        if ((rayDir.y > abs(rayDir.x)*1.0) && (rayDir.y > abs(rayDir.z*0.25))) final = vec3(2.0)*rayDir.y;
        float roundBox = length(max(abs(rayDir.xz/max(0.0,rayDir.y))-vec2(0.9, 4.0),0.0))-0.1;
        final += vec3(0.8)* pow(saturate(1.0 - roundBox*0.5), 6.0);

        final += pow(lightCol1, vec3(2.0, 1.5, 1.5)) * pow(ld1, 8.0);
        final += lightCol1 * pow(ld1, 200.0);
        final += pow(lightCol2, vec3(2.0, 1.5, 1.5)) * pow(ld2, 8.0);
        final += lightCol2 * pow(ld2, 200.0);
        return final;
      }

      vec3 normal(in vec3 pos)
      {
        vec3  eps = vec3(.001,0.0,0.0);
        vec3 col;
        float ref;
        float trans;
        vec3 nor;
        vec3 absorb;
        nor.x = distanceField(pos+eps.xyy, col, ref, trans, absorb) - distanceField(pos-eps.xyy, col, ref, trans, absorb);
        nor.y = distanceField(pos+eps.yxy, col, ref, trans, absorb) - distanceField(pos-eps.yxy, col, ref, trans, absorb);
        nor.z = distanceField(pos+eps.yyx, col, ref, trans, absorb) - distanceField(pos-eps.yyx, col, ref, trans, absorb);
        return normalize(nor);
      }

      float rayMarch(in float dmod, in vec3 ro, inout vec3 rd, float mint, float minstep, out int rep, out vec3 col, out float ref, out float trans, out vec3 absorb)
      {
        float t = mint;
        for (int i = 0; i < MAX_RAY_MARCHES; i++)
        {
          float distance_ = distanceField(ro + rd*t, col, ref, trans, absorb);
          float distance = dmod*distance_;
          if (distance < TOLERANCE*t || t > MAX_RAY_LENGTH) break;
          t += max(distance, minstep);
          rep = i;
        }
        return t;
      }

      float softShadow(in vec3 pos, in vec3 ld, in float ll, float mint, float k)
      {
        const float minShadow = 0.25;
        float res = 1.0;
        float t = mint;
        vec3 col;
        float ref;
        float trans;
        vec3 absorb;
        for (int i=0; i<24; i++)
        {
          float distance = distanceField(pos + ld*t, col, ref, trans, absorb);
          res = min(res, k*distance/t);
          if (ll <= t) break;
          if(res <= minShadow) break;
          t += max(mint*0.2, distance);
        }
        return clamp(res,minShadow,1.0);
      }

      vec3 postProcess(in vec3 col, in vec2 q)
      {
        //col = saturate(col);
        col=pow(clamp(col,0.0,1.0),vec3(0.75));
        col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast
        col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation
        col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting
        return col;
      }

      vec3 render(in vec3 ro, in vec3 rd)
      {
        vec3 lightPos = 1.5*vec3(1.5, 3.0, 1.0);

        vec3 final  = vec3(0.0);

        vec3 ragg   = vec3(1.0);

        float tdist = 0.0;

        float refraction = 0.9;

        bool inside = false;

        float mint    = 0.01;
        float minstep = 0.001;

        for (int i = 0; i < MAX_BOUNCES; ++i)
        {
          if (maxComp(ragg) <  0.01) break;
          float dmod  = inside ? -1.0 : 1.0;
          vec3 absorb = vec3(3.0, 2.0, 1.0);
          vec3 col    = vec3(1.0);
          float ref   = 0.2;
          float trans = 0.9;
          int rep     = 0;
          float t     = rayMarch(dmod, ro, rd, mint, minstep, rep, col, ref, trans, absorb);
          tdist       += t;

          vec3 pos    = ro + t*rd;

          vec3 nor = vec3(0.0, 1.0, 0.0);

          if (t < MAX_RAY_LENGTH)
          {
            // Ray intersected object
            nor = normal(pos);
          }
          else
          {
            // Ray intersected sky
            final += ragg*getSkyColor(rd);
            break;
          }

          float fresnel = pow(1.0 - abs(dot(nor, rd)), 3.0);

          ref = mix(ref, 1.0, fresnel);
          trans = mix(trans, 0.0, fresnel);

          float mref = refraction;

          if (inside)
          {
            nor = -nor;
            mref = 1.0/refraction;
          }

          vec3 refl = reflect(rd, nor);
          vec3 refr = refract(rd, nor, mref);

          vec3 lv   = lightPos - pos;
          vec3  ld  = normalize(lv);
          float ll  = length(lv);
          // TODO: Rework shadow to "work" with transparent objects
          float sha = 1.0;
          if (!inside)
          {
            sha = softShadow(pos, ld, ll, 0.01, 64.0);
          }

          float dif = max(dot(nor,ld),0.0);
          float occ = 1.0 - float(rep)/float(MAX_RAY_MARCHES);
          float l   = dif*sha*occ;


          vec3 lr   = vec3(0.0);

          float lin = mix(0.2, 1.0, l);

          vec3 sky  = getSkyColor(refl);
          //col *= (0.7 + 0.3*abs(nor.zxy));
          vec3 mcol = mix(lin*col + lr, sky, ref);

          vec3 beer = vec3(1.0);

          if (inside)
          {
            beer = exp(-absorb*t);
          }
          final      += (1.0 - trans)*ragg*beer*mcol;
          ragg       *= trans*beer;

          ro        = pos;

          if (refr == vec3(0.0))
          {
             rd = refl;
          }
          else
          {
            rd = refr;
            inside = !inside;
          }

            /*
          if (fresnel >)
          {
            //final += vec3(1.0);
            mint = 0.1;
            minstep = 0.01;
          }
          else
          {
            minstep = 0.001;
          }
      */
        }


        return final;
      }

      vec3 getSample(in vec2 p)
      {
        // camera

        float time = getTimeInPeriod();


        vec3 ro  = vec3(2.0);
        vec3 la  = vec3(0.0);

        //pR(ro.xz, PI/4.0 + time/PERIOD);
        pR(ro.xz, iTime/8.0);

        vec3 ww = normalize(la - ro);
        vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));
        vec3 vv = normalize(cross(ww,uu));
        vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );

        vec3 col = render(ro, rd);

        return col;
      }

      void mainImage(out vec4 fragColor, in vec2 fragCoord)
      {
        float time = getTimeInPeriod();
        vec2 q=fragCoord.xy/iResolution.xy;
        vec2 p = -1.0 + 2.0*q;
        p.x *= iResolution.x/iResolution.y;

      #if AA == 0
        vec3 col = getSample(p);
      #elif AA == 1
        vec3 col  = vec3(0.0);
        vec2 unit = 1.0/iResolution.xy;
        for(int y = 0; y < 2; ++y)
        {
          for(int x = 0; x < 2; ++x)
          {
            col += getSample(p - 0.5*unit + unit*vec2(x, y));
          }
        }

        col /= 4.0;
      #endif

        float fadeIn   = smoothstep(0.0, FADETIME, time);
        float whiteOut = smoothstep(PERIOD - FADETIME*2.0, PERIOD - FADETIME, time);
        float fadeOut  = 1.0 - smoothstep(PERIOD - FADETIME, PERIOD, time);
        fadeIn  = 1.0;
        whiteOut= 0.0;
        fadeOut = 1.0;

        fragColor = vec4(mix(postProcess(col, q), vec3(1.0), whiteOut)*fadeIn*fadeOut, 1.0);
      }
    </script>

    <!-- Vertex shader program -->

    <script id="shader-vs" type="x-shader/x-vertex">
      attribute highp vec3 aVertexPosition;
      attribute highp vec3 aVertexNormal;
      attribute highp vec2 aTextureCoord;

      varying highp vec2 vTextureCoord;
      varying highp vec3 vNormal;

      void main(void) {
        gl_Position   = vec4(aVertexPosition, 1.0);
        vNormal = aVertexNormal;
        vTextureCoord = aTextureCoord;
      }
    </script>
  </head>

  <body onload="start()">
    <canvas id="glcanvas" width="1920" height="1080">
      Your browser doesn't appear to support the HTML5 <code>&lt;canvas&gt;</code> element.
    </canvas>
    <br/>
    <iframe width="800" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/266939782&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>
    </body>
</html>